{
  "name": "Yoga.js",
  "tagline": "Javascript library which powers javascript",
  "body": "# Yoga.JS\r\n###Javascript library which powers javascript\r\n\r\nWhy Yoga? In Vedic Sanskrit, yoga (from the root yuj) means \"to add\", \"to join\", \"to unite\", or \"to attach\" in its most common literal sense. There are very many compound words containing yoga in Sanskrit. Yoga can take on meanings such as \"connection\", \"contact\", \"union\", \"method\", \"application\", \"addition\" and \"performance\". In simpler words, Yoga also means \"combined\".\r\n\r\nIn that sense, Yoga.JS make **connection** with existing Java objects like Array, Object, String, Math etc and provides methods in **addition** to what JS engine by default provides.\r\n\r\nMany libraries are available which gives similar functionality to what Yoga.JS provides. But all libraries provides functions in different scope which requires more parameters more code. Yoga.JS powers javascript objects by adding methods to existing objects as if it supports by default by the javascript engine.\r\n\r\n##Examples\r\n\r\n## Array Concat\r\n\r\n`var a = [10, 20, 30];`\r\n\r\n\r\n`var b = [40, 50, 60];`\r\n\r\n`a.concat(b);`\r\n\r\n## Array Iterator\r\n\r\n`var a = [10, 20, 30];`\r\n\r\n\r\n`a.iterator();`\r\n\r\n\r\n`while(a.hasNext()){\r\n    console.log(a.next());\r\n}`\r\n\r\n## Object Entries\r\n\r\n`var a = { foo: \"bar\", baz: 42 };\r\na.entries();`    // [ ['foo', 'bar'], ['baz', 42] ]\r\n\r\n\r\n### Authors and Contributors\r\nAuthor: Vaseem Abbas Mohammed\r\n\r\n### Suggestions/Issues\r\n[Click here for Suggestions/Issues](https://github.com/vaseems/yoga.js/issues)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}